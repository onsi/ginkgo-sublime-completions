{
	"scope": "source.go",
	"completions": [
		{
			"trigger": "aft",
			"kind": ["function", "s", "Ginkgo Setup Node"],
			"annotation": "AfterEach",
			"details": "Add an <code>AfterEach</code> setup node",
			"contents": "AfterEach(func() {\n    $0\n})",
		},
		{
			"trigger": "bef",
			"kind": ["function", "s", "Ginkgo Setup Node"],
			"annotation": "BeforeEach",
			"details": "Add a <code>BeforeEach</code> setup node",
			"contents": "BeforeEach(func() {\n    $0\n})",
		},
		{
			"trigger": "jus",
			"kind": ["function", "s", "Ginkgo Setup Node"],
			"annotation": "JustBeforeEach",
			"details": "Add a <code>JustBeforeEach</code> setup node",
			"contents": "JustBeforeEach(func() {\n    $0\n})",
		},
		{
			"trigger": "rep",
			"kind": ["function", "R", "Ginkgo Reporting Node"],
			"annotation": "ReportAfterEach",
			"details": "Add a <code>RepoertAfterEach</code> reporting node",
			"contents": "ReportAfterEach(func(report SpecReport) {\n    $0\n})",
		},
		{
			"trigger": "repbef",
			"kind": ["function", "R", "Ginkgo Reporting Node"],
			"annotation": "ReportBeforeEach",
			"details": "Add a <code>RepoertBeforeEach</code> reporting node",
			"contents": "ReportBeforeEach(func(report SpecReport) {\n    $0\n})",
		},
		{
			"trigger": "repsuite",
			"kind": ["function", "R", "Ginkgo Reporting Node"],
			"annotation": "ReportAfterSuite",
			"details": "Add a <code>RepoertAfterSuite</code> reporting node",
			"contents": "ReportAfterSuite(func(report Report) {\n    $0\n})",
		},
		{
			"trigger": "afts",
			"kind": ["function", "S", "Ginkgo Suite Setup Node"],
			"annotation": "AfterSuite",
			"details": "Add an <code>AfterSuite</code> suite setup node",
			"contents": "AfterSuite(func() {\n    $0\n})",
		},
		{
			"trigger": "befs",
			"kind": ["function", "S", "Ginkgo Suite Setup Node"],
			"annotation": "BeforeSuite",
			"details": "Add a <code>BeforeSuite</code> suite setup node",
			"contents": "BeforeSuite(func() {\n    $0\n})",
		},
		{
			"trigger": "syncafts",
			"kind": ["function", "S", "Ginkgo Suite Setup Node"],
			"annotation": "SynchronizedAfterSuite",
			"details": "Add an <code>SynchronizedAfterSuite</code> suite setup node",
			"contents": "SynchronizedAfterSuite(func() {\n    ${1://runs on all processes}\n}, func() {\n    ${2://runs on process #1}\n})",
		},
		{
			"trigger": "syncbefs",
			"kind": ["function", "S", "Ginkgo Suite Setup Node"],
			"annotation": "SynchronizedBeforeSuite",
			"details": "Add a <code>SynchronizedBeforeSuite</code> suite setup node",
			"contents": "SynchronizedBeforeSuite(func() []byte {\n    ${1://runs on process #1}\n    return $2\n}, func(data []byte) {\n    ${3://runs on all processes}\n})",
		},
		{
			"trigger": "cont",
			"kind": ["function", "C", "Ginkgo Container Node"],
			"annotation": "Context",
			"details": "Add a <code>Context</code> container node",
			"contents": "Context(\"$1\", func() {\n    $2\n})",
		},
		{
			"trigger": "desc",
			"kind": ["function", "C", "Ginkgo Container Node"],
			"annotation": "Describe",
			"details": "Add a <code>Describe</code> container node",
			"contents": "Describe(\"$1\", func() {\n    $2\n})",
		},
		{
			"trigger": "it",
			"kind": ["function", "I", "Ginkgo Subject Node"],
			"annotation": "It",
			"details": "Add a <code>It</code> subject node",
			"contents": "It(\"$1\", func() {\n    $2\n})",
		},
		{
			"trigger": "by",
			"kind": ["keyword", "G", "Ginkgo By Annotation"],
			"annotation": "By",
			"details": "Add a <code>By</code> annotation to document a large spec",
			"contents": "By(\"$0\")",
		},
		{
			"trigger": "offset",
			"kind": ["keyword", "D", "Ginkgo Offset Decorator"],
			"annotation": "Offset(N)",
			"details": "Add an <code>Offset</code> decorator",
			"contents": "Offset(${1:N})",
		},
		{
			"trigger": "flake",
			"kind": ["keyword", "D", "Ginkgo FlakeAttempts Decorator"],
			"annotation": "FlakeAttempts(N)",
			"details": "Add a <code>FlakeAttempts</code> decorator",
			"contents": "FlakeAttempts(${1:N})",
		},
		{
			"trigger": "serial",
			"kind": ["keyword", "D", "Ginkgo Serial Decorator"],
			"annotation": "Serial",
			"details": "Add a <code>Serial</code> decorator",
			"contents": "Serial",
		},
		{
			"trigger": "ordered",
			"kind": ["keyword", "D", "Ginkgo Ordered Decorator"],
			"annotation": "Ordered",
			"details": "Add a <code>Ordered</code> decorator",
			"contents": "Ordered",
		},
		{
			"trigger": "once",
			"kind": ["keyword", "D", "Ginkgo OncePerOrdered Decorator"],
			"annotation": "OncePerOrdered",
			"details": "Add a <code>OncePerOrdered</code> decorator",
			"contents": "OncePerOrdered",
		},
		{
			"trigger": "lab",
			"kind": ["keyword", "D", "Ginkgo Label Decorator"],
			"annotation": "Label",
			"details": "Add a <code>Label</code> decorator",
			"contents": "Label(\"${1:label}\")",
		},
		{
			"trigger": "gof",
			"kind": ["snippet", "s", "Ginkgo Goroutine"],
			"annotation": "go func() { defer GinkgoRecover() }",
			"details": "Add a goroutine protected by <code>GinkgoRecover()</code>",
			"contents": "go func() {\n    defer GinkgoRecover()\n    $1\n}()",
		},
		{
			"trigger": "dt",
			"kind": ["snippet", "s", "Ginkgo DescribeTable"],
			"annotation": "DescribeTable",
			"details": "Add a new Ginkgo table",
			"contents": "DescribeTable(\"${1:description}\",\n    func(${2:params}) {\n        ${3://test body}\n    },\n    ${4:Entries...}\n)",
		},
		{
			"trigger": "dtd",
			"kind": ["snippet", "s", "Ginkgo DescribeTable"],
			"annotation": "DescribeTable with Entry Description function",
			"details": "Add a new Ginkgo table",
			"contents": "DescribeTable(\"${1:description}\",\n    func(${2:params}) {\n        ${3://test body}\n    },\n    func(${4:$2}) string {\n        ${5:return \"entry description\"}\n    },\n    ${6:Entries...}\n)",
		},
		{
			"trigger": "entry",
			"kind": ["snippet", "s", "Ginkgo Table Entry"],
			"annotation": "Entry",
			"details": "Add a new Ginkgo table entry",
			"contents": "Entry(\"${1:description}\", ${2:params}),",
		},
		{
			"trigger": "entryn",
			"kind": ["snippet", "s", "Ginkgo Table Entry"],
			"annotation": "Entry(nil, ...)",
			"details": "Add a new Ginkgo table entry",
			"contents": "Entry(nil, ${2:params}),",
		},
		{
			"trigger": "def",
			"kind": ["keyword", "G", "DeferCleanup"],
			"annotation": "DeferCleanup",
			"details": "Add a Ginkgo DeferCleanup()",
			"contents": "DeferCleanup(${1:function}, ${2:args...})",
		},
		{
			"trigger": "cons",
			"kind": ["markup", "Ω", "Gomega Consistently"],
			"annotation": "Consistently",
			"details": "Add a <code>Consistently</code> expectation",
			"contents": "Consistently(${1}).Should$2(${3:Equal}($4))",
		},
		{
			"trigger": "consf",
			"kind": ["markup", "Ω", "Gomega Consistently with Function"],
			"annotation": "Consistently(func()",
			"details": "Add a <code>Consistently</code> expectation that takes a function",
			"contents": "Consistently(func() ${1:interface{}} {\n    return $2\n}).Should$3(${4:Equal}($5))",
		},
		{
			"trigger": "consg",
			"kind": ["markup", "Ω", "Gomega Consistently with Function(Gomega)"],
			"annotation": "Consistently(func(g Gomega))",
			"details": "Add a <code>Consistently</code> expectation that takes a function that receives a Gomega",
			"contents": "Consistently(func(g Gomega) ${1:interface{}} {\n    return $2\n}).Should$3(${4:Equal}($5))",
		},
		{
			"trigger": "ev",
			"kind": ["markup", "Ω", "Gomega Eventually"],
			"annotation": "Eventually",
			"details": "Add an <code>Eventually</code> expectation",
			"contents": "Eventually(${1}).Should$2(${3:Equal}($4))",
		},
		{
			"trigger": "evf",
			"kind": ["markup", "Ω", "Gomega Eventually with Function"],
			"annotation": "Eventually(func()",
			"details": "Add an <code>Eventually</code> expectation that takes a function",
			"contents": "Eventually(func() ${1:interface{}} {\n    return $2\n}).Should$3(${4:Equal}($5))",
		},
		{
			"trigger": "evg",
			"kind": ["markup", "Ω", "Gomega Eventually with Function(Gomega)"],
			"annotation": "Eventually(func(g Gomega))",
			"details": "Add an <code>Eventually</code> expectation that takes a function that receives a Gomega",
			"contents": "Eventually(func(g Gomega) ${1:interface{}} {\n    return $2\n}).Should$3(${4:Equal}($5))",
		},
		{
			"trigger": "evs",
			"kind": ["markup", "Ω", "Gomega Eventually should Succeed"],
			"annotation": "Eventually(func(g Gomega)).Should(Succeed())",
			"details": "Add an <code>Eventually</code> expectation that should eventually succeed",
			"contents": "Eventually(func(g Gomega) {\n    $1\n}).Should(Succeed())",
		},
		{
			"trigger": "ex",
			"kind": ["markup", "Ω", "Gomega Expect"],
			"annotation": "Expect",
			"details": "Add an <code>Expect</code> expectation",
			"contents": "Expect(${1}).$2To(${3:Equal}($4))",
		},
		{
			"trigger": "exerr",
			"kind": ["markup", "Ω", "Gomega Error Expectation"],
			"annotation": "Expect(err).NotTo(HaveOccurred())",
			"details": "Add an <code>Expect</code> error expectation",
			"contents": "Expect(${1:err}).NotTo(HaveOccurred())",
		},
		{
			"trigger": "exs",
			"kind": ["markup", "Ω", "Gomega Success Expectation"],
			"annotation": "Expect(f()).To(Succeed())",
			"details": "Add an <code>Expect</code> success expectation",
			"contents": "Expect(${1:f}($2)).To(Succeed())",			
		},
		{
			"trigger": "Ω",
			"kind": ["markup", "Ω", "Gomega Ω"],
			"annotation": "Ω",
			"details": "Add an <code>Ω</code> expectation",
			"contents": "Ω(${1}).Should$2(${3:Equal}($4))",
		},
		{
			"trigger": "Ωerr",
			"kind": ["markup", "Ω", "Gomega Error Expectation"],
			"annotation": "Ω(err).ShouldNot(HaveOccurred())",
			"details": "Add an <code>Ω</code> error expectation",
			"contents": "Ω(${1:err}).ShouldNot(HaveOccurred())",
		},
		{
			"trigger": "Ωs",
			"kind": ["markup", "Ω", "Gomega Success Expectation"],
			"annotation": "Ω(f()).To(Succeed())",
			"details": "Add an <code>Ω</code> success expectation",
			"contents": "Ω(${1:f}($2)).Should(Succeed())",			
		},
		//decorators
		//reportentry
		//walk through dsl
	]
}